name: Build and test project
on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get branch name
        id: branch_meta
        run: echo ::set-output name=name::${GITHUB_REF#refs/*/}

      - name: Prepare
        id: prep
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          IMAGE="is3ny/python_time_server"
          echo "::set-output name=tagged_image::${IMAGE}:${TAG}"
          echo "::set-output name=image::${IMAGE}"

      - name: Set up Docker Buildx
        id: buildx
        # Use the action from the master, as there are some inconsistencies with @v1
        # Issue: https://github.com/docker/build-push-action/issues/286
        uses: docker/setup-buildx-action@master
        with:
          install: true   # makes `docker build` use buildx by default

      # Refer to this issue on type=gha https://github.com/docker/build-push-action/issues/252
      # Caching also works for multi-stage builds
      - name: Build application image
        uses: docker/build-push-action@v2
        with:
          context: ./app_python
          file: ./app_python/Dockerfile
          load: true
          tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}

      - name: Create real Dockerfile.test
        run: |
          echo "FROM ${{ steps.prep.outputs.tagged_image }}" > _Dockerfile
          cat "app_python/Dockerfile.test" >> _Dockerfile

      # The test image is not cached due to the limitations of docker driver
      # Nonetheless, the test image should not depent on anything external,
      # so it's build time shouldn't be a concern.
      - name: Build test image
        uses: docker/build-push-action@v2
        with:
          context: ./app_python
          file: ./_Dockerfile
          builder: default
          tags: ${{ steps.prep.outputs.tagged_image }}-test

      - name: Test
        run: |
          rm _Dockerfile
          docker run --rm ${{ steps.prep.outputs.tagged_image }}-test

      - name: Publish
        if: ${{ steps.branch_meta.outputs.name == 'main' }}
        run: |
          docker image rm ${{ steps.prep.outputs.tagged_image }}-test
          docker tag ${{ steps.prep.outputs.tagged_image }} ${{ steps.prep.outputs.image }}:latest
          echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker push ${{ steps.prep.outputs.tagged_image }}
          docker push ${{ steps.prep.outputs.image }}:latest 
